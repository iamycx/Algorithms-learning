<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，对sql进行分类化管理，理解sql隔离，
使用mapper代理方法开发，namespace有特殊的重要作用 -->
<mapper namespace="test">

	<!-- 在映射文件中配置很多sql语句 -->
	
	
	<!-- 通过id查询用户表 -->
	<!-- 通过select执行数据库查询
	id:标识映射文件中的sql
	将sql语句封装到mappedStatement对象中，所以将id称为statement的id 
	parameterType:指定输入参数的类型，这里指定int型
	#{}表示一个占位符
	#{id}:id表示接收输入的参数，参数名就是id，如果输入参数是简单类型，#{}中的参数名可以是任意，可以是value或其他名称
	resultType:指定sql输出结果所映射的java对象类型，select指定resultTypt表示将单条记录映射成的java对象-->
	<select id = "findUserById"  parameterType="int"  resultType="mybatis.po.User">
		SELECT * FROM USER WHERE id=#{value}
	</select>
	
	<!-- 根据用户名称模糊的查找用户信息，可能返回多条 
	resultType:指定就是单条记录所映射的java对象类型
	${}：表示拼接sql串，将接收到的参数内容不加修饰的拼接在sql中，但是可能会引起sql注入
	${value}:接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value-->
	<select id = "findUserByName"  parameterType="java.lang.String"  resultType="mybatis.po.User">
		SELECT * FROM USER WHERE username LIKE '%${value}%'
	</select>
	
	<!-- 添加用户 
	parameterType:指定输入参数是pojo(包含用户信息)
	#{}中指定pojo的属性名，接受到pojo的属性值，mybatis也是通过OGNL获取对象的属性值-->
	<insert id = "insertUser"  parameterType="mybatis.po.User">
		<!-- 将插入数据的主键返回，返回到user对象中
		SELECT LAST_INSERT_ID()：得到刚insert进记录的主键值，只适用于自增主键
		order：SELECT LAST_INSERT_ID()执行顺序，相对于insert来说它的执行顺序 
		resultType：指定SELECT LAST_INSERT_ID()的结果类型-->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT LAST_INSERT_ID()
		</selectKey>
		insert into user(id,username,birthday,sex,address) value(#{id},#{username},#{birthday},#{sex},#{address})
		<!-- 使用mysql的uuid()生成主键 (非自增)
		执行过程：通过uuid()得到主键，将主键设置到user的id属性中
		其次在insert执行时，从user对象中取出id属性值-->
		<!-- <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
			SELECT uuid()
		</selectKey>
		insert into user(id,username,birthday,sex,address) value(#{id},#{username},#{birthday},#{sex},#{address}) -->
	</insert>
	
	<!-- 删除用户
	根据输入用户id删除用户 -->
	<delete id="deleteUser" parameterType="java.lang.Integer">
		delete from user where id=#{id}
	</delete>
	
	<!-- 更新用户
	根据输入用户id更新用户 
	parameterType指定user对象，包括id和更新信息，其中id必须存在
	#{id}:从输入user对象中获取id的属性值-->
	<update id="updateUser" parameterType="mybatis.po.User">
		update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
	</update>
</mapper>